plugins {
	id 'java'
	id 'application'
}

sourceCompatibility = 1.7
targetCompatibility = 1.7

def starmadeDirectory = project.property("starmade_root")
def modName = project.property("mod_name")
group = project.property('mod_org_id')
version = project.property('mod_version')
mainClassName = group + modName

repositories {
	mavenCentral()
}

dependencies {
	implementation(files(starmadeDirectory + "StarMade.jar"))
	implementation(fileTree(dir: (starmadeDirectory + "lib"), include: "*.jar"))
//	implementation 'com.github.oshi:oshi-core:6.6.4'
}

compileJava.options.encoding = 'UTF-8'

tasks.register("updateVersion") {
	doLast {
		def modJson = file('src/main/resources/mod.json')
		def modJsonContent = modJson.getText()
		modJsonContent = modJsonContent.replaceAll(/"version":\s*".*"/, "\"version\": \"" + version + "\"")
		modJson.write(modJsonContent)
	}
}

jar {
	dependsOn("updateVersion", "clean")
	duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
	destinationDirectory.set(file(starmadeDirectory + "mods"))
	archiveFileName = modName + 'v' + getVersion() +  '.jar'
	manifest.attributes('Main-Class': mainClassName)
	from {
		configurations.runtimeClasspath.collect {
			if(!it.getPath().contains("StarMade") && it.getName().endsWith(".jar")) it.isDirectory() ? it : zipTree(it)
			else return null;
		}
	}
}